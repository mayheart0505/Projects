#pragma config(Sensor, in4,    pot,            sensorPotentiometer)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightMotor,    tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port3,           armMotor,      tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port10,          leftMotor,     tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*----------------------------------------------------------------------------------------------------*\
|*                                    - Dual Joystick Control -                                      *|
|*                                      ROBOTC on VEX 2.0 Cortex                                      *|
|*                                                                                                    *|
|*  This program uses both the Left and the Right joysticks to run the robot using "tank control".    *|
|*                                                                                                    *|
|*                                        ROBOT CONFIGURATION                                         *|
|*    NOTES:                                                                                          *|
|*    1)  Ch1 is the X axis and Ch2 is the Y axis for the RIGHT joystick.                             *|
|*    2)  Ch3 is the Y axis and Ch4 is the X axis for the LEFT joystick.                              *|
|*                                                                                                    *|
|*    MOTORS & SENSORS:                                                                               *|
|*    [I/O Port]              [Name]              [Type]              [Description]                   *|
|*    Motor - Port 2          rightMotor           VEX Motor           Right motor                    *|
|*    Motor - Port 3          leftMotor            VEX Motor           Left motor                     *|
\*----------------------------------------------------------------------------------------------------*/

//+++++++++++++++++++++++++++++++++++++++++++++| MAIN |+++++++++++++++++++++++++++++++++++++++++++++++


void moveStraight(int encoderCount)
{
	// Robot waits for 2000 milliseconds before executing program

	SensorValue[rightEncoder] = 0;	  // Set the encoder so that it starts counting at 0
	SensorValue[leftEncoder]  = 0;	  // Set the encoder so that it starts counting at 0

	while(abs(SensorValue[rightEncoder]) < encoderCount && abs(SensorValue[leftEncoder]) < encoderCount)		// Creates an infinite loop, since "true" always evaluates to true
	{
		if(SensorValue[rightEncoder] > SensorValue[leftEncoder]) // If rightEncoder has counted the same amount as leftEncoder:
		{
			// Move Forward
			motor[rightMotor] = 65;		    // Right Motor is run at power level 80
			motor[leftMotor]  = 50;		    // Left Motor is run at power level 80
		}
		if(SensorValue[rightEncoder] > SensorValue[leftEncoder])	// If rightEncoder has counted more encoder counts
		{
			// Turn slightly right
			motor[rightMotor] = 50;		    // Right Motor is run at power level 60
			motor[leftMotor]  = 65;		    // Left Motor is run at power level 80
		}
		if(SensorValue[rightEncoder] == SensorValue[leftEncoder]);	// Only runs if leftEncoder has counted more encoder counts
		{
			// Turn slightly left
			motor[rightMotor] = 63;		    // Right Motor is run at power level 80
			motor[leftMotor]  = 63;		    // Left Motor is run at power level 60
		}

	}
	motor[rightMotor] = 0;
	motor[leftMotor] = 0;
}

void turnRight(int encoderCount){

	// Robot waits for 2000 milliseconds before executing program

	SensorValue[rightEncoder] = 0;	  // Set the encoder so that it starts counting at 0
	SensorValue[leftEncoder]  = 0;	  // Set the encoder so that it starts counting at 0

	while(abs(SensorValue[rightEncoder]) < encoderCount)		// Creates an infinite loop, since "true" always evaluates to true
	{

		motor[rightMotor] = -60;
		motor[leftMotor] = 	60;
	}
	motor[rightMotor] = 0;
	motor[leftMotor] = 0;
}

void turnLeft(int encoderCount){

	// Robot waits for 2000 milliseconds before executing program

	SensorValue[rightEncoder] = 0;	  // Set the encoder so that it starts counting at 0
	SensorValue[leftEncoder]  = 0;	  // Set the encoder so that it starts counting at 0

	while(abs(SensorValue[rightEncoder]) < encoderCount)		// Creates an infinite loop, since "true" always evaluates to true
	{

		motor[rightMotor] = 63;
		motor[leftMotor] = 	-63;
	}
	motor[rightMotor] = 0;
	motor[rightMotor] = 0;
}

void armUp(int armVal)
{
	while(SensorValue[pot] < armVal)
	{
		motor[armMotor] = 30;
	}
	motor[armMotor] = 0;
}

void armDown(int armVal)
{
	while(SensorValue[pot] < armVal)
	{
		motor[armMotor] = -30;
	}
	motor[armMotor] = 0;
}
task main ()
{
	while(1==1)
	{
		while(vexRT[Btn7U] == 0)
		{
		}
		moveStraight(250);
		wait1Msec(500);
		turnLeft(185);
		moveStraight(550);
		
		
		


		while(vexRT[Btn7D] == 0)
		{
		}

		ClearTimer(T1);
		while(time1[T1]< 90000)

		{
			motor[leftMotor]  = vexRT[Ch3];   // Left Joystick Y value
			motor[rightMotor] = vexRT[Ch2];   // Right Joystick Y value

			if(vexRT[Btn6U]== 1)
			{
				motor[armMotor] = 30;
			}
			else if(vexRT[Btn6D]== 1)
			{
				motor[armMotor] = -20
			}
			else
			{
				motor[armMotor] = 0;
			}
		}
		motor[leftMotor] = 0;
		motor[rightMotor] = 0;
	}
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
