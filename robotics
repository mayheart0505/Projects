#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightMotor,    tmotorNone, openLoop)
#pragma config(Motor,  port2,            ,             tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port3,            ,             tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port10,          leftMotor,     tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*----------------------------------------------------------------------------------------------------*\
|*                              - Forward for Distance with Encoders -                                *|
|*                                      ROBOTC on VEX 2.0 CORTEX                                      *|
|*                                                                                                    *|
|*  This program instructs the robot to move forward for 5 rotations of the left shaft encoder.       *|
|*                                                                                                    *|
|*                                        ROBOT CONFIGURATION                                         *|
|*    NOTES:                                                                                          *|
|*    1)  Reversing 'rightMotor' (port 2) in the "Motors and Sensors Setup" is needed with the        *|
|*        "Squarebot" model, but may not be needed for all robot configurations.                      *|
|*    2)  Whichever encoder is being used for feedback should be cleared just before it starts        *|
|*        counting by using the "SensorValue(encoder) = 0;".  This helps ensure consistancy.          *|
|*                                                                                                    *|
|*    MOTORS & SENSORS:                                                                               *|
|*    [I/O Port]          [Name]              [Type]                [Description]                     *|
|*    Motor   - Port 2    rightMotor          VEX 3-wire module     Right side motor                  *|
|*    Motor   - Port 3    leftMotor           VEX 3-wire module     Left side motor                   *|
|*    Digital - Port 1,2  rightEncoder        VEX Shaft Encoder     Right side                        *|
|*    Digital - Port 3,4  leftEncoder         VEX Shaft Encoder     Left side                         *|
\*----------------------------------------------------------------------------------------------------*/


//+++++++++++++++++++++++++++++++++++++++++++++| MAIN |+++++++++++++++++++++++++++++++++++++++++++++++
task main()
{
  wait1Msec(2000);  // 2 Second Delay

  //MoveForward
  SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 850)  // While less than 5 rotations on the leftEncoder...
  {
		if(abs(SensorValue[leftEncoder])> abs(SensorValue[rightEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -44;
		}
		if(abs(SensorValue[rightEncoder])> abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 44;
			motor[leftMotor] = -63;
		}
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -63;
		}
  }


  //MoveLeft
  SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 120)  // While less than 5 rotations on the leftEncoder...
  {

    motor[rightMotor] = 44;
    motor[leftMotor] = 	63;
  }

  //Move Forward
 SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 1000)  // While less than 5 rotations on the leftEncoder...
  {

   	if(abs(SensorValue[leftEncoder])> abs(SensorValue[rightEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -44;
		}
		if(abs(SensorValue[rightEncoder])> abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 44;
			motor[leftMotor] = -63;
		}
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -63;
		}
  }

  //Move Right
  SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 210)  // While less than 5 rotations on the leftEncoder...
  {

    motor[rightMotor] = -44;
    motor[leftMotor] = 	-63;
  }

  //Move forward
  SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 600)  // While less than 5 rotations on the leftEncoder...
  {

   	if(abs(SensorValue[leftEncoder])> abs(SensorValue[rightEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -44;
		}
		if(abs(SensorValue[rightEncoder])> abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 44;
			motor[leftMotor] = -63;
		}
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -63;
		}
  }

  //MoveRight
   SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 240)  // While less than 5 rotations on the leftEncoder...
  {

    motor[rightMotor] = -44;
    motor[leftMotor] = 	-63;
  }

  //MoveForward
 SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 400)  // While less than 5 rotations on the leftEncoder...
  {

   	if(abs(SensorValue[leftEncoder])> abs(SensorValue[rightEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -44;
		}
		if(abs(SensorValue[rightEncoder])> abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 44;
			motor[leftMotor] = -63;
		}
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -63;
		}
  }
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
