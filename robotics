#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightMotor,    tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port10,          leftMotor,     tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*----------------------------------------------------------------------------------------------------*\
|*                                 - Moving Straight with Encoders -                                  *|
|*                                      ROBOTC on VEX 2.0 CORTEX                                      *|
|*                                                                                                    *|
|*  This program implements a self-straightening algorithm that provides a higher power level to the  *|
|*  motor that has traveled less, determined by comparing the values of the two encoders.             *|
|*  There is a 2 second pause at the beginning of the program.                                        *|
|*                                                                                                    *|
|*                                        ROBOT CONFIGURATION                                         *|
|*    NOTES:                                                                                          *|
|*    1)  Reversing 'rightMotor' (port 2) in the "Motors and Sensors Setup" is needed with the        *|
|*        "Squarebot" model, but may not be needed for all robot configurations.                      *|
|*    2)  Whichever encoder is being used for feedback should be cleared just before it starts        *|
|*        counting by using the "SensorValue(encoder) = 0;".  This helps ensure consistancy.          *|
|*                                                                                                    *|
|*    MOTORS & SENSORS:                                                                               *|
|*    [I/O Port]          [Name]              [Type]                [Description]                     *|
|*    Motor   - Port 2    rightMotor          VEX 3-wire module     Right side motor                  *|
|*    Motor   - Port 3    leftMotor           VEX 3-wire module     Left side motor                   *|
|*    Digital - Port 1,2  rightEncoder        VEX Shaft Encoder     Right side                        *|
|*    Digital - Port 3,4  leftEncoder         VEX Shaft Encoder     Left side                         *|
\*----------------------------------------------------------------------------------------------------*/


//+++++++++++++++++++++++++++++++++++++++++++++| MAIN |+++++++++++++++++++++++++++++++++++++++++++++++
void moveStraight()
{
		wait1Msec(2000);							// Robot waits for 2000 milliseconds before executing program

	SensorValue[rightEncoder] = 0;	  // Set the encoder so that it starts counting at 0
	SensorValue[leftEncoder]  = 0;	  // Set the encoder so that it starts counting at 0

	while(1 == 1)		// Creates an infinite loop, since "true" always evaluates to true
	{
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder])) // If rightEncoder has counted the same amount as leftEncoder:
		{
			// Move Forward
			motor[rightMotor] = 80;		    // Right Motor is run at power level 80
			motor[leftMotor]  = 80;		    // Left Motor is run at power level 80
		}
		else if(abs(SensorValue[rightEncoder]) > abs(SensorValue[leftEncoder])	// If rightEncoder has counted more encoder counts
		{
			// Turn slightly right
			motor[rightMotor] = 52.85;		    // Right Motor is run at power level 60
			motor[leftMotor]  = 100;		    // Left Motor is run at power level 80
		}
		else	// Only runs if leftEncoder has counted more encoder counts
		{
			// Turn slightly left
			motor[rightMotor] = 100;		    // Right Motor is run at power level 80
			motor[leftMotor]  = 52.85;		    // Left Motor is run at power level 60
		}
	}


}

task main()
{
	movingStraight(
	/*wait1Msec(2000);							// Robot waits for 2000 milliseconds before executing program

	SensorValue[rightEncoder] = 0;	  // Set the encoder so that it starts counting at 0
	SensorValue[leftEncoder]  = 0;	  // Set the encoder so that it starts counting at 0

	while(1 == 1)		// Creates an infinite loop, since "true" always evaluates to true
	{
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder])) // If rightEncoder has counted the same amount as leftEncoder:
		{
			// Move Forward
			motor[rightMotor] = 80;		    // Right Motor is run at power level 80
			motor[leftMotor]  = 80;		    // Left Motor is run at power level 80
		}
		else if(abs(SensorValue[rightEncoder]) > abs(SensorValue[leftEncoder])	// If rightEncoder has counted more encoder counts
		{
			// Turn slightly right
			motor[rightMotor] = 52.85;		    // Right Motor is run at power level 60
			motor[leftMotor]  = 100;		    // Left Motor is run at power level 80
		}
		else	// Only runs if leftEncoder has counted more encoder counts
		{
			// Turn slightly left
			motor[rightMotor] = 100;		    // Right Motor is run at power level 80
			motor[leftMotor]  = 52.85;		    // Left Motor is run at power level 60
		}
	}*/

}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 240)  // While less than 5 rotations on the leftEncoder...
  {

    motor[rightMotor] = -44;
    motor[leftMotor] = 	-63;
  }

  //MoveForward
 SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;

  while(abs(SensorValue[leftEncoder]) < 400)  // While less than 5 rotations on the leftEncoder...
  {

   	if(abs(SensorValue[leftEncoder])> abs(SensorValue[rightEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -44;
		}
		if(abs(SensorValue[rightEncoder])> abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 44;
			motor[leftMotor] = -63;
		}
		if(abs(SensorValue[rightEncoder]) == abs(SensorValue[leftEncoder]))
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = -63;
		}
  }
}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
