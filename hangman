import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import javax.swing.JComponent;
import javax.swing.JFrame;

public class hangman extends JComponent implements KeyListener {
	static ArrayList<Character> alpha = new ArrayList<Character>();

	int checkWin = 0;
	int hold = 0;
	char[] screen = new char[5];
	String letter = "";
	char[] answer;
	int wrong = 0;
	boolean[] given = new boolean[5];

	public hangman() {

		Arrays.fill(screen, '_');

		String[] wordsa = { "chair", "grape", "pizza", "ramen", "sushi", "tiger", "panda", "mango", "ninja", "abyss" };
		char[][] words = new char[wordsa.length][];
		for (int i = 0; i < wordsa.length; i++) {
			words[i] = wordsa[i].toCharArray();
		}
		int chosen = (int) (Math.random() * 9);
		answer = words[chosen];

	}

	public void paintComponent(Graphics g) {
		// Draws boxes for letters

		drawBox(g, 'A');
		drawBox(g, 'B');
		drawBox(g, 'C');
		drawBox(g, 'D');
		drawBox(g, 'E');
		drawBox(g, 'F');
		drawBox(g, 'G');
		drawBox(g, 'H');
		drawBox(g, 'I');
		drawBox(g, 'J');
		drawBox(g, 'K');
		drawBox(g, 'L');
		drawBox(g, 'M');
		drawBox(g, 'N');
		drawBox(g, 'O');
		drawBox(g, 'P');
		drawBox(g, 'Q');
		drawBox(g, 'R');
		drawBox(g, 'S');
		drawBox(g, 'T');
		drawBox(g, 'U');
		drawBox(g, 'V');
		drawBox(g, 'W');
		drawBox(g, 'X');
		drawBox(g, 'Y');
		drawBox(g, 'Z');

		// Draws lines
		g.fillRect(5, 150, 135, 3);

		g.setColor(Color.WHITE);
		g.setFont(new Font("Consolas", Font.PLAIN, 20));
		g.drawString(String.valueOf(screen), 45, 150 - 9);

		// Draws all the letters

		g.drawString("Z", 58, 542);

		g.drawString("Y", 18, 542);

		g.drawString("X", 98, 502);

		g.drawString("W", 58, 502);

		g.drawString("V", 18, 502);

		g.drawString("U", 98, 462);
		g.drawString("T", 58, 462);
		g.drawString("S", 18, 462);

		g.drawString("R", 98, 422);
		g.drawString("Q", 58, 422);
		g.drawString("P", 18, 422);

		g.drawString("O", 98, 382);
		g.drawString("N", 58, 382);
		g.drawString("M", 18, 382);

		g.drawString("L", 98, 342);
		g.drawString("K", 58, 342);
		g.drawString("J", 18, 342);

		g.drawString("I", 98, 302);
		g.drawString("H", 58, 302);
		g.drawString("G", 18, 302);

		g.drawString("F", 98, 262);
		g.drawString("E", 58, 262);
		g.drawString("D", 18, 262);

		g.drawString("C", 98, 222);
		g.drawString("B", 58, 222);
		g.drawString("A", 18, 222);

		// drawing man stand

		g.setColor(Color.WHITE);

		g.fillRect(0, 10, 140, 3);
		g.fillRect(70, 13, 3, 20);

		// draw body (put in if statement)
		if (wrong >= 1) {
			g.drawOval(60, 33, 20, 20);
		}
		if (wrong >= 2) {
			g.drawRect(65, 53, 10, 40);
		}
		if (wrong >= 3) {
			g.fillRect(45, 63, 20, 1);
		}
		if (wrong >= 4) {
			g.fillRect(75, 63, 20, 1);
		}
		if (wrong >= 5) {
			g.fillRect(65, 93, 1, 20);
		}
		if (wrong >= 6) {
			g.fillRect(75, 93, 1, 20);
		}

	}

//changes color of box if letter is used already
	public void drawBox(Graphics g, char letter) {

		if (checkIfUsed(letter)) {
			g.setColor(Color.BLACK);
		} else {
			g.setColor(Color.MAGENTA);
		}

		if (letter == 'Y') {
			g.fillRect(10, 520, 30, 30);
		}

		if (letter == 'Z') {
			g.fillRect(50, 520, 30, 30);
		}
		if (letter == 'V') {
			g.fillRect(10, 480, 30, 30);
		}

		if (letter == 'W') {
			g.fillRect(50, 480, 30, 30);
		}
		if (letter == 'X') {
			g.fillRect(90, 480, 30, 30);
		}
		if (letter == 'S') {
			g.fillRect(10, 440, 30, 30);
		}
		if (letter == 'T') {
			g.fillRect(50, 440, 30, 30);
		}
		if (letter == 'U') {
			g.fillRect(90, 440, 30, 30);
		}
		if (letter == 'P') {
			g.fillRect(10, 400, 30, 30);
		}
		if (letter == 'Q') {
			g.fillRect(50, 400, 30, 30);
		}
		if (letter == 'R') {
			g.fillRect(90, 400, 30, 30);

		}
		if (letter == 'M') {
			g.fillRect(10, 360, 30, 30);
		}
		if (letter == 'N') {
			g.fillRect(50, 360, 30, 30);
		}
		if (letter == 'O') {
			g.fillRect(90, 360, 30, 30);
		}
		if (letter == 'J') {
			g.fillRect(10, 320, 30, 30);
		}
		if (letter == 'K') {
			g.fillRect(50, 320, 30, 30);
		}
		if (letter == 'L') {
			g.fillRect(90, 320, 30, 30);
		}
		if (letter == 'G') {
			g.fillRect(10, 280, 30, 30);
		}
		if (letter == 'H') {
			g.fillRect(50, 280, 30, 30);
		}
		if (letter == 'I') {
			g.fillRect(90, 280, 30, 30);
		}
		if (letter == 'D') {
			g.fillRect(10, 240, 30, 30);
		}
		if (letter == 'E') {
			g.fillRect(50, 240, 30, 30);
		}
		if (letter == 'F') {
			g.fillRect(90, 240, 30, 30);
		}

		if (letter == 'A') {
			g.fillRect(10, 200, 30, 30);
		}
		if (letter == 'B') {
			g.fillRect(50, 200, 30, 30);
		}
		if (letter == 'C') {
			g.fillRect(90, 200, 30, 30);
		}
	}

	public static void main(String[] args) {

		hangman temp = new hangman();
		JFrame frame = new JFrame("hangman");
		frame.setVisible(true);
		frame.setSize(155, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setBackground(Color.BLACK);
		frame.add(temp);
		frame.addKeyListener(temp);

	}

	public static boolean checkIfUsed(char l) {
		for (char letters : alpha) {

			if (letters == Character.toLowerCase(l))
				return true;

		}

		return false;

	}

	/*
	 * public static void printList(ArrayList list) { for(char letters : alpha) {
	 * System.out.println(letters); } }
	 */

	@Override
	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub
		System.out.println((int) (arg0.getKeyChar() - 'a'));
		char c = arg0.getKeyChar();
		hold = 0;

		for (int i = 0; i < 5; i++) {

			if (answer[i] == c && checkIfUsed(c) == false) {
				screen[i] = c;
				repaint();

				checkWin = checkWin + 1;

				System.out.println("checkWin " + checkWin);
			} else {
				hold++;
			}
			// System.out.println("hold "+ hold);
		}

		// update lose count
		if (hold == 5 && checkIfUsed(c) == false) {
			wrong++;
			System.out.println(wrong);
			repaint();
		}
		alpha.add(c);
		// check lose
		if (wrong == 6) {
			alpha.clear();
			// System.out.println("wrong " +wrong);
			Arrays.fill(screen, '_');
			wrong = 0;
			checkWin = 0;
			repaint();
		}

		if (checkWin == 5) {
			/*int timeToWait = 2; // second
			try {
				for (int d = 0; d < timeToWait; d++) {
					Thread.sleep(1000);
				}
			} catch (InterruptedException ie) {
				Thread.currentThread().interrupt();
			}*/

			alpha.clear();
			// printList(alpha);

			wrong = 0;
			Arrays.fill(screen, '_');
			checkWin = 0;
		}

	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}
}
